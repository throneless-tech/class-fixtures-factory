{"version":3,"file":"class-fixtures-factory.cjs.development.js","sources":["../src/common/utils.ts","../src/decorators/Fixture.ts","../src/metadata/BaseMetadataStore.ts","../src/metadata/ClassValidatorAdapter.ts","../src/metadata/DefaultMetadataStore.ts","../src/FactoryLogger.ts","../src/FixtureFactory.ts"],"sourcesContent":["/**\n * Get possible values from an enum\n * @param enumObj\n */\nexport const getEnumValues = (enumObj: any) => {\n  const keysList = Object.getOwnPropertyNames(enumObj).filter(key => {\n    // eslint-disable-next-line no-prototype-builtins\n    return enumObj.propertyIsEnumerable(key) && key !== String(parseFloat(key));\n  });\n  const length = keysList.length;\n  const valuesList = new Array<any>(length);\n  for (let index = 0; index < length; ++index) {\n    const key = keysList[index];\n    const value = enumObj[key];\n    valuesList[index] = value;\n  }\n  return valuesList;\n};\n","import { decorateProperty } from 'tinspector';\n\nexport type FixtureOptions =\n  | string\n  | ((faker?: Faker.FakerStatic) => string | undefined)\n  | (() => any)\n  | {\n      type?: () => object;\n      ignore?: boolean;\n      enum?: object;\n      min?: number;\n      max?: number;\n      get?: ((faker?: Faker.FakerStatic) => string | undefined) | (() => any);\n      optional?: boolean;\n    };\n\n/**\n * Decorator for providing metadata about a property\n * or for customizing the generate fixture\n * @param options\n */\nexport function Fixture(options?: FixtureOptions) {\n  return decorateProperty({\n    type: 'Fixture',\n    value: options,\n  });\n}\n","import { Class } from '../common/typings';\n\nexport interface ClassMetadata {\n  name: string;\n  properties: PropertyMetadata[];\n}\n\nexport interface PropertyMetadata {\n  name: string;\n  type: string;\n  scalar?: boolean;\n  enum?: boolean;\n  items?: any[];\n  array?: boolean;\n  ignore?: boolean;\n  min?: number;\n  max?: number;\n  optional?: boolean;\n  input?: (...args: any[]) => any;\n}\n\nexport abstract class BaseMetadataStore {\n  protected store: Record<string, ClassMetadata> = {};\n  get(classType: Class | string) {\n    const name = typeof classType === 'string' ? classType : classType.name;\n    const value = this.store[name];\n    if (!value) throw new Error(`Cannot find metadata for class \"${name}\"`);\n    return value;\n  }\n  abstract make(classType: Class): ClassMetadata;\n}\n","import { ValidationMetadata } from 'class-validator/metadata/ValidationMetadata';\nimport { getFromContainer, MetadataStorage } from 'class-validator';\nimport faker from 'faker';\nimport { PropertyMetadata } from '.';\nimport { Class } from '..';\n\ninterface WorkingData {\n  type?: 'number' | 'decimal' | 'date' | 'alpha' | 'alphanumeric' | 'array';\n  min?: number | Date;\n  max?: number | Date;\n  case?: 'lower' | 'upper';\n  options?: any;\n}\n\nexport class ClassValidatorAdapter {\n  private metadata: Record<string, ValidationMetadata[]> = {};\n\n  extractMedatada(classType: Class) {\n    const metadata = getFromContainer(\n      MetadataStorage\n    ).getTargetValidationMetadatas(classType, '');\n    return (this.metadata[classType.name] = metadata);\n  }\n\n  makePropertyMetadata(\n    cvMeta: ValidationMetadata,\n    existingProp: PropertyMetadata | undefined\n  ): PropertyMetadata | Partial<PropertyMetadata> {\n    const prop: Partial<PropertyMetadata> = {\n      name: cvMeta.propertyName,\n      ...(existingProp || {}),\n    };\n    const data: WorkingData = {\n      type: null as any,\n      max: null as any,\n      min: null as any,\n    };\n\n    switch (cvMeta.type) {\n      case 'isBoolean': {\n        return {\n          ...prop,\n          type: prop.type || 'boolean',\n          input: () => faker.random.boolean(),\n        } as PropertyMetadata;\n      }\n      case 'isDate': {\n        data.type = 'date';\n        break;\n      }\n      case 'isString': {\n        data.type = 'alpha';\n        break;\n      }\n      case 'isNumber':\n      case 'isInt':\n      case 'isNumberString': {\n        data.type = 'number';\n        break;\n      }\n      case 'isIn': {\n        const items = cvMeta.constraints[0];\n        return {\n          ...prop,\n          type: prop.type || 'any',\n          input: () => faker.random.arrayElement(items),\n        } as PropertyMetadata;\n      }\n      case 'equals':\n        return {\n          ...prop,\n          type: prop.type || 'any',\n          input: () => cvMeta.constraints[0],\n        };\n      case 'isEmpty':\n        return {\n          ...prop,\n          type: prop.type || 'any',\n          input: () => null,\n        };\n      case 'isPositive':\n        data.type = 'number';\n        data.min = 1;\n        break;\n      case 'isNegative':\n        data.type = 'number';\n        data.max = -1;\n        break;\n      case 'min': {\n        const value = cvMeta.constraints[0];\n        data.type = 'number';\n        data.min = value;\n        break;\n      }\n      case 'max': {\n        const value = cvMeta.constraints[0];\n        data.type = 'number';\n        data.max = value;\n        break;\n      }\n      case 'minDate': {\n        const value = cvMeta.constraints[0];\n        data.type = 'date';\n        data.min = value;\n        break;\n      }\n      case 'maxDate': {\n        const value = cvMeta.constraints[0];\n        data.type = 'date';\n        data.max = value;\n        break;\n      }\n      case 'contains': {\n        const value = cvMeta.constraints[0];\n        return {\n          ...prop,\n          type: prop.type || 'any',\n          input: () => `${faker.random.word()}${value}${faker.random.word()}`,\n        };\n      }\n      case 'isAlpha':\n        data.type = 'alpha';\n        break;\n      case 'isAlphanumeric':\n        data.type = 'alphanumeric';\n        break;\n      case 'isDecimal':\n        data.options = cvMeta.constraints[0];\n        data.type = 'decimal';\n        break;\n      case 'isEmail':\n        return {\n          ...prop,\n          type: 'string',\n          input: () => faker.internet.email(),\n        };\n      case 'isFqdn':\n        return {\n          ...prop,\n          type: 'string',\n          input: () => faker.internet.domainName(),\n        };\n      case 'isHexColor':\n        return {\n          ...prop,\n          type: 'string',\n          input: () => faker.internet.color(),\n        };\n      case 'isLowercase':\n        data.type = 'alpha';\n        data.case = 'lower';\n        break;\n      case 'isUppercase':\n        data.type = 'alpha';\n        data.case = 'upper';\n        break;\n      case 'length': {\n        const [min, max] = cvMeta.constraints;\n        data.min = min;\n        data.max = max || 6;\n        data.type = 'alpha';\n        break;\n      }\n      case 'minLength': {\n        const value = cvMeta.constraints[0];\n        data.min = value;\n        data.type = 'alpha';\n        break;\n      }\n      case 'maxLength': {\n        const value = cvMeta.constraints[0];\n        data.max = value;\n        data.type = 'alpha';\n        break;\n      }\n      case 'arrayContains': {\n        const value = cvMeta.constraints[0];\n        return {\n          ...prop,\n          type: 'string',\n          input: () => value,\n        };\n      }\n      case 'arrayMinSize': {\n        const value = cvMeta.constraints[0];\n        data.type = 'array';\n        data.min = value;\n        break;\n      }\n      case 'arrayMaxSize': {\n        const value = cvMeta.constraints[0];\n        data.type = 'array';\n        data.max = value;\n        break;\n      }\n    }\n\n    if (typeof data.max === 'number' && !data.min) {\n      data.min = data.max - 1;\n    } else if (typeof data.min === 'number' && !data.max) {\n      data.max = data.min + 1;\n    }\n    if (\n      typeof data.max === 'number' &&\n      typeof data.min === 'number' &&\n      data.min > data.max\n    ) {\n      data.max = data.min + 1;\n    }\n\n    switch (data.type) {\n      case 'number': {\n        const min = data.min as number;\n        const max = data.max as number;\n        const sign = max < 0 ? -1 : 1;\n        let value =\n          sign *\n          faker.random.number({\n            min: Math.abs(min || sign),\n            max: Math.abs(max || 10000),\n          });\n        return {\n          ...prop,\n          type: 'number',\n          input: () => value,\n        };\n      }\n      case 'decimal': {\n        const min = data.min as number;\n        const max = data.max as number;\n        const digits = Number(data.options.decimal_digits || '1');\n        const sign = max < 0 ? -1 : 1;\n        let value =\n          sign *\n          parseFloat(\n            faker.finance.amount(\n              Math.abs(min || sign),\n              Math.abs(max || 10000),\n              digits\n            )\n          );\n        return {\n          ...prop,\n          type: 'number',\n          input: () => value,\n        };\n      }\n      case 'date': {\n        const min = data.min as Date;\n        const max = data.max as Date;\n        let value: Date;\n        if (min) {\n          value = faker.date.between(min, max || faker.date.future(1, min));\n        } else if (max) {\n          value = faker.date.between(min || faker.date.past(1, max), max);\n        } else {\n          value = faker.date.recent();\n        }\n        return {\n          ...prop,\n          type: 'Date',\n          input: () => value,\n        };\n      }\n      case 'alpha': {\n        const min = data.min as number;\n        const max = data.max as number;\n        const ln = faker.random.number({ min: min || 5, max: max || 10 });\n        const value = faker.lorem\n          .sentence(100)\n          .substr(0, ln)\n          [data.case === 'lower' ? 'toLowerCase' : 'toUpperCase']();\n        return {\n          ...prop,\n          type: 'string',\n          input: () => value,\n        };\n      }\n      case 'alphanumeric': {\n        const min = data.min as number;\n        const max = data.max as number;\n        const ln = faker.random.number({ min: min || 5, max: max || 10 });\n        return {\n          ...prop,\n          type: 'string',\n          input: () =>\n            faker.random\n              .alphaNumeric(ln)\n              [data.case === 'lower' ? 'toLowerCase' : 'toUpperCase'](),\n        };\n      }\n      case 'array': {\n        if (!prop.type) {\n          throw new Error(\n            `The type of \"${cvMeta.propertyName}\" seems to be an array. Use @Fixture({ type: () => Foo })`\n          );\n        }\n        return {\n          ...prop,\n          max: (data.max as number) || prop.max,\n          min: (data.min as number) || prop.min,\n        };\n      }\n    }\n\n    if (!prop.type) {\n      throw new Error(\n        `Couldn't extract the type of \"${cvMeta.propertyName}\". Use @Fixture({ type: () => Foo })`\n      );\n    }\n\n    return prop;\n  }\n}\n","import {\n  BaseMetadataStore,\n  ClassMetadata,\n  PropertyMetadata,\n} from './BaseMetadataStore';\nimport { Class } from '../common/typings';\nimport reflect, { PropertyReflection } from 'tinspector';\nimport { FixtureOptions } from '../decorators/Fixture';\nimport { getEnumValues } from '../common/utils';\nimport { ClassValidatorAdapter } from './ClassValidatorAdapter';\n\nexport class DefaultMetadataStore extends BaseMetadataStore {\n  private cvAdapter = new ClassValidatorAdapter();\n\n  constructor(private readonly acceptPartialResult = false) {\n    super();\n  }\n  /**\n   * Make type metadata for a class\n   * @param classType\n   */\n  make(classType: Class): ClassMetadata {\n    const rMetadata = reflect(classType);\n    const cvMetadata = this.cvAdapter.extractMedatada(classType);\n\n    let properties = rMetadata.properties\n      .map(prop => this.makePropertyMetadata(prop)!)\n      .filter(Boolean);\n    for (const cvMeta of cvMetadata) {\n      let existing = properties.find(prop => prop.name === cvMeta.propertyName);\n      const deduced = this.cvAdapter.makePropertyMetadata(\n        cvMeta,\n        existing\n      ) as PropertyMetadata;\n      if (existing) {\n        properties = properties.map(prop =>\n          prop.name === cvMeta.propertyName ? deduced : existing!\n        );\n      } else {\n        properties.push(deduced);\n      }\n    }\n\n    const classMetadata: ClassMetadata = {\n      name: rMetadata.name,\n      properties: properties.filter(Boolean),\n    };\n    return (this.store[classType.name] = classMetadata);\n  }\n\n  private makePropertyMetadata(\n    prop: PropertyReflection\n  ): PropertyMetadata | null {\n    const decorator = this.getFixtureDecorator(prop);\n    const meta: Partial<PropertyMetadata> = {\n      name: prop.name,\n      scalar: prop.typeClassification === 'Primitive',\n    };\n    if (decorator) {\n      if (typeof decorator === 'function') {\n        meta.input = decorator.bind(decorator, require('faker'));\n      } else if (typeof decorator === 'string') {\n        meta.input = () => decorator;\n      } else if (typeof decorator === 'object') {\n        if (decorator.ignore) return null;\n        meta.input = decorator.get;\n        meta.min = decorator.min || 1;\n        meta.max = decorator.max || 3;\n        meta.optional = decorator.optional || false;\n        let inputType: any = decorator.type?.();\n        if (inputType) {\n          if (Array.isArray(inputType)) {\n            inputType = inputType[0];\n            meta.array = true;\n          }\n          if (!inputType.prototype) {\n            throw new Error(\n              `Only pass class names to \"type\" in @Fixture({ type: () => Foo}) for \"${meta.name}\"`\n            );\n          }\n          const { name } = inputType;\n          if (!['string', 'number', 'boolean'].includes(name.toLowerCase())) {\n            meta.type = name;\n          } else {\n            meta.type = name.toLowerCase();\n          }\n        }\n        if (decorator.enum) {\n          meta.enum = true;\n          meta.items = getEnumValues(decorator.enum);\n        }\n      }\n    }\n    if (!meta.type) {\n      if (!prop.type) {\n        if (this.acceptPartialResult) {\n          return meta as PropertyMetadata;\n        }\n      } else if (Array.isArray(prop.type)) {\n        throw new Error(\n          `The type of \"${meta.name}\" seems to be an array. Use @Fixture({ type: () => Foo })`\n        );\n      } else if (prop.type instanceof Function) {\n        const { name } = prop.type as Function;\n        if (!['string', 'number', 'boolean'].includes(name.toLowerCase())) {\n          meta.type = name;\n        } else {\n          meta.type = name.toLowerCase();\n        }\n      }\n    }\n    if (!meta.type) {\n      throw new Error(\n        `Couldn't extract the type of \"${meta.name}\". Use @Fixture({ type: () => Foo })`\n      );\n    }\n    return meta as PropertyMetadata;\n  }\n\n  private getFixtureDecorator(prop: PropertyReflection): FixtureOptions {\n    return prop.decorators.find(v => v.type === 'Fixture')?.value || null;\n  }\n}\n","import { ClassMetadata, PropertyMetadata } from './metadata';\nimport chalk from 'chalk';\nimport treeify from 'treeify';\n\nexport class FactoryLogger {\n  private rootTree: any = {};\n  private tree: any = {};\n  private duplicates: Record<string, number> = {};\n\n  start(meta: ClassMetadata, number = 0) {\n    const entry = `Generated an instance of ${chalk.gray('\"')}${chalk.cyan(\n      meta.name\n    )}${chalk.gray('\"')}${number ? `${chalk.gray(` (${number})`)}` : ''}`;\n    this.rootTree[entry] = {};\n    this.tree = this.rootTree[entry];\n  }\n\n  onIgnoreProp(prop: PropertyMetadata) {\n    const name = chalk.cyan(prop.name);\n    this.tree[name] = chalk.gray(`(ignored)`);\n  }\n\n  onCustomProp(prop: PropertyMetadata) {\n    const name = chalk.cyan(prop.name);\n    this.tree[name] = chalk.gray(`(custom value)`);\n  }\n\n  onClassPropDone(prop: PropertyMetadata, targetLogger: FactoryLogger) {\n    const name = chalk.cyan(prop.name);\n    if (this.tree[name]) {\n      const number = (this.duplicates[prop.name] =\n        (this.duplicates[prop.name] || 0) + 1);\n      const entry = (val: number) =>\n        `Generated an instance of ${chalk.gray('\"')}${chalk.cyan(\n          prop.type\n        )}${chalk.gray('\"')}${chalk.gray(` (${val})`)}`;\n      const firstKey = Object.keys(this.tree[name])[0];\n      if (number === 1) {\n        this.tree[name][entry(number - 1)] = this.tree[name][firstKey];\n        delete this.tree[name][firstKey];\n      }\n      this.tree[name][entry(number)] = targetLogger.rootTree;\n    } else {\n      this.tree[name] = targetLogger.rootTree;\n    }\n  }\n\n  onNormalProp(prop: PropertyMetadata, value: any) {\n    const name = chalk.cyan(prop.name);\n    this.tree[name] = value;\n  }\n\n  onClassValidator(prop: PropertyMetadata, value: any) {\n    const name = chalk.cyan(prop.name);\n    this.tree[name] = `${chalk.gray('class-validator]')} ${value}`;\n  }\n\n  onDone(duration: number) {\n    this.tree[`${chalk.green('Done')} ${chalk.gray(`(${duration}ms)`)}`] = null;\n  }\n\n  onError(duration: number) {\n    this.tree[`${chalk.red('Error')} ${chalk.gray(`(${duration}ms)`)}`] = null;\n  }\n\n  log() {\n    return treeify.asTree(this.rootTree, true, false);\n  }\n}\n","import {\n  BaseMetadataStore,\n  DefaultMetadataStore,\n  ClassMetadata,\n  PropertyMetadata,\n} from './metadata';\nimport { Class } from './common/typings';\nimport faker from 'faker';\nimport chalk from 'chalk';\nimport { FactoryLogger } from './FactoryLogger';\n//import { ClassValidatorAdapter } from './ClassValidatorAdapter';\n\nexport interface FactoryOptions {\n  logging?: boolean;\n  maxDepth?: number;\n}\n\ntype DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U>\n    ? Array<DeepPartial<U>>\n    : T[P] extends ReadonlyArray<infer U>\n    ? ReadonlyArray<DeepPartial<U>>\n    : DeepPartial<T[P]>;\n};\n\nexport interface FactoryResult<T> {\n  one: () => T;\n  many: (x: number) => T[];\n  with: (input: DeepPartial<T>) => FactoryResult<T>;\n  ignore: (...props: (keyof T)[]) => FactoryResult<T>;\n}\n\nexport type Assigner = (\n  prop: PropertyMetadata,\n  object: any,\n  value: any\n) => void;\n\nexport class FixtureFactory {\n  private store: BaseMetadataStore;\n  private classTypes: Record<string, Class> = {};\n  private DEFAULT_OPTIONS: FactoryOptions = {\n    logging: false,\n    maxDepth: 4,\n  };\n  private options!: FactoryOptions;\n  private loggers: FactoryLogger[] = [];\n  private assigner: Assigner = this.defaultAssigner.bind(this);\n  //private cvAdapter = new ClassValidatorAdapter();\n\n  constructor(options?: FactoryOptions) {\n    this.store = new DefaultMetadataStore();\n    this.options = {\n      ...this.DEFAULT_OPTIONS,\n      ...(options || {}),\n    };\n  }\n\n  private defaultAssigner(prop: PropertyMetadata, object: any, value: any) {\n    object[prop.name] = value;\n  }\n\n  /**\n   * Set a function to take charge of assigning values to\n   * generated objects\n   * @param fn\n   */\n  setAssigner(fn: Assigner) {\n    this.assigner = fn;\n  }\n\n  /**\n   * You can set a custom metadata store\n   * for extension purposes.\n   * The store should extends `BaseMetadataStore`\n   * @param store\n   */\n  setMetadataStore(store: BaseMetadataStore) {\n    this.store = store;\n  }\n\n  /**\n   * Returns the instance of the metadata store\n   */\n  getStore() {\n    return this.store;\n  }\n\n  /**\n   * Attemps to log a message.\n   * Won't work if logging is disabled.\n   * @param msg\n   */\n  log(msg: string, force = false) {\n    if (force || this.options.logging) {\n      console.log(chalk.gray('[FixtureFactory] '), msg);\n    }\n  }\n\n  newLogger(meta: ClassMetadata) {\n    this.loggers.unshift(new FactoryLogger());\n    const logger = this.logger();\n    logger.start(meta);\n    return logger;\n  }\n\n  logger() {\n    return this.loggers[0];\n  }\n\n  printLogger(dispose = false) {\n    const logger = this.logger();\n    if (!logger) return;\n    this.log('\\n' + logger.log());\n    if (dispose) {\n      this.disposeLogger();\n    }\n  }\n\n  disposeLogger() {\n    this.loggers.shift();\n  }\n\n  /**\n   * Register classes to be used by the factory\n   * @param classTypes\n   */\n  register(classTypes: Class[]) {\n    for (const classType of classTypes) {\n      this.store.make(classType);\n      this.classTypes[classType.name] = classType;\n    }\n  }\n\n  /**\n   * Generate fixtures\n   * @param classType\n   */\n  make<T extends Class>(classType: T): FactoryResult<InstanceType<T>> {\n    this.store.make(classType);\n    const meta = this.store.get(classType);\n    let propsToIgnore: string[] = [];\n    let userInput: DeepPartial<T> = {};\n\n    const result: FactoryResult<InstanceType<T>> = {\n      one: () => {\n        let error = false;\n        let object: any = {};\n        const startDate = new Date();\n        this.newLogger(meta);\n\n        try {\n          object = this._make(meta, classType, propsToIgnore);\n          for (const [key, value] of Object.entries(userInput)) {\n            object[key] = value;\n          }\n        } catch (err) {\n          this.log(\n            chalk.red(`An error occured while generating \"${meta.name}\"`),\n            true\n          );\n          console.error(err);\n          error = true;\n        }\n\n        const elapsed = +new Date() - +startDate;\n        this.logger()[error ? 'onError' : 'onDone'](elapsed);\n        this.printLogger(true);\n        return error ? null : object;\n      },\n      many: (x: number) => {\n        return [...Array(x).keys()].map(() => result.one());\n      },\n      with: (input: DeepPartial<T>) => {\n        userInput = input;\n        for (const key of Object.keys(input)) {\n          propsToIgnore.push(key);\n        }\n        return result;\n      },\n      ignore: (...props: any[]) => {\n        propsToIgnore = propsToIgnore.concat(props as string[]);\n        return result;\n      },\n    };\n    return result;\n  }\n\n  protected _make(\n    meta: ClassMetadata,\n    classType: Class,\n    propsToIgnore: string[] = [],\n    depth: number = 0\n  ) {\n    const object = new classType();\n    for (const prop of meta.properties) {\n      if (propsToIgnore.includes(prop.name)) continue;\n      if (this.shouldIgnoreProperty(prop)) continue;\n      this.assigner(prop, object, this.makeProperty(prop, meta, depth + 1));\n    }\n    return object;\n  }\n\n  protected shouldIgnoreProperty(prop: PropertyMetadata) {\n    //if (prop.type === 'method') return true;\n    if (prop.ignore) return true;\n    return false;\n  }\n\n  protected makeProperty(\n    prop: PropertyMetadata,\n    meta: ClassMetadata,\n    depth: number\n  ): any {\n    if (prop.input) {\n      this.logger().onCustomProp(prop);\n      return prop.input();\n    }\n    if (prop.scalar) {\n      const value = this.makeScalarProperty(prop);\n      this.logger().onNormalProp(prop, value);\n      return value;\n    } else if (prop.array) {\n      return this.makeArrayProp(prop, meta, depth);\n    }\n    return this.makeObjectProp(meta, prop, depth);\n  }\n\n  protected makeScalarProperty(prop: PropertyMetadata) {\n    if (prop.enum) {\n      if (prop.items) {\n        return faker.random.arrayElement(prop.items);\n      }\n    }\n    switch (prop.type) {\n      case 'string':\n        return faker.random.word();\n      case 'number':\n        return faker.random.number();\n      case 'boolean':\n        return faker.random.boolean();\n      case 'Date':\n        return faker.date.recent();\n      default:\n        break;\n    }\n    throw new Error(`Can't generate a value for this scalar`);\n  }\n\n  private makeArrayProp(\n    prop: PropertyMetadata,\n    meta: ClassMetadata,\n    depth: number\n  ) {\n    const amount = faker.random.number({\n      max: prop.max,\n      min: prop.min,\n    });\n    if (this.options.maxDepth && depth >= this.options.maxDepth) return [];\n    if (['string', 'number', 'boolean', 'Date'].includes(prop.type)) {\n      return [...Array(amount).keys()].map(() =>\n        this.makeProperty(\n          {\n            ...prop,\n            array: false,\n            scalar: true,\n          },\n          meta,\n          depth\n        )\n      );\n    }\n    return [...Array(amount).keys()].map(() =>\n      this.makeProperty(\n        {\n          ...prop,\n          array: false,\n        },\n        meta,\n        depth\n      )\n    );\n  }\n\n  private makeObjectProp(\n    meta: ClassMetadata,\n    prop: PropertyMetadata,\n    depth: number\n  ) {\n    const refClassMeta = this.store.get(prop.type);\n    const props = this.findRefSideProps(meta, prop);\n\n    const oldLogger = this.logger();\n    const logger = this.newLogger(refClassMeta);\n\n    let value;\n    if (\n      !this.options.maxDepth ||\n      !(\n        this.options.maxDepth &&\n        depth >= this.options.maxDepth &&\n        prop.optional\n      )\n    ) {\n      value = this._make(\n        refClassMeta,\n        this.classTypes[prop.type],\n        props.map(p => p.name),\n        depth\n      );\n    }\n\n    oldLogger.onClassPropDone(prop, logger);\n    this.disposeLogger();\n\n    return value;\n  }\n\n  private findRefSideProps(meta: ClassMetadata, prop: PropertyMetadata) {\n    const props: PropertyMetadata[] = [];\n    const refClassMeta = this.store.get(prop.type);\n    for (const refProp of refClassMeta.properties) {\n      if (refProp.type === meta.name) {\n        props.push(refProp);\n      }\n    }\n    return props;\n  }\n}\n"],"names":["decorateProperty","getFromContainer","MetadataStorage","__assign","__read","__extends","reflect","__values","__spread"],"mappings":"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"}